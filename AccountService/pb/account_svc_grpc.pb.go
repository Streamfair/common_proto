// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	account "github.com/Streamfair/common_proto/AccountService/pb/account"
	account_type "github.com/Streamfair/common_proto/AccountService/pb/account_type"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// Accounts
	CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error)
	ListAccountByOwner(ctx context.Context, in *account.ListAccountByOwnerRequest, opts ...grpc.CallOption) (*account.ListAccountByOwnerResponse, error)
	// Accounttype
	CreateAccountType(ctx context.Context, in *account_type.CreateAccountTypeRequest, opts ...grpc.CallOption) (*account_type.CreateAccountTypeResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *account.CreateAccountRequest, opts ...grpc.CallOption) (*account.CreateAccountResponse, error) {
	out := new(account.CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/pb.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListAccountByOwner(ctx context.Context, in *account.ListAccountByOwnerRequest, opts ...grpc.CallOption) (*account.ListAccountByOwnerResponse, error) {
	out := new(account.ListAccountByOwnerResponse)
	err := c.cc.Invoke(ctx, "/pb.AccountService/ListAccountByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccountType(ctx context.Context, in *account_type.CreateAccountTypeRequest, opts ...grpc.CallOption) (*account_type.CreateAccountTypeResponse, error) {
	out := new(account_type.CreateAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/pb.AccountService/CreateAccountType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// Accounts
	CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error)
	ListAccountByOwner(context.Context, *account.ListAccountByOwnerRequest) (*account.ListAccountByOwnerResponse, error)
	// Accounttype
	CreateAccountType(context.Context, *account_type.CreateAccountTypeRequest) (*account_type.CreateAccountTypeResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *account.CreateAccountRequest) (*account.CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) ListAccountByOwner(context.Context, *account.ListAccountByOwnerRequest) (*account.ListAccountByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountByOwner not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccountType(context.Context, *account_type.CreateAccountTypeRequest) (*account_type.CreateAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountType not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*account.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListAccountByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ListAccountByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListAccountByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AccountService/ListAccountByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListAccountByOwner(ctx, req.(*account.ListAccountByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account_type.CreateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AccountService/CreateAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccountType(ctx, req.(*account_type.CreateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "ListAccountByOwner",
			Handler:    _AccountService_ListAccountByOwner_Handler,
		},
		{
			MethodName: "CreateAccountType",
			Handler:    _AccountService_CreateAccountType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_svc.proto",
}
