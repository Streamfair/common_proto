syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "login/rpc_login_user.proto";
import "register/rpc_register_user.proto";

option go_package = "github.com/Streamfair/common_proto/IdentityProvider/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
	  title: "Streamfair Identity Provider";
	  version: "1.0";
	  contact: {
		name: "Streamfair";
		url: "https://github.com/Streamfair";
		email: "nelix@posteo.de";
	  };
	};
};

service IdentityProvider {
	// /login_user attempts to authenticate and create a session for a user and returns the session and the user if successful.
	rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
		option (google.api.http) = {
			post: "/streamfair/v1/login_user"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "add description here",
			summary: "add summary here",
		};
	}
	// /register_user attempts to create a user and returns the user if successful.
	rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
		option (google.api.http) = {
			post: "/streamfair/v1/register_user"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "add description here",
			summary: "add summary here",
		};
	}
}
